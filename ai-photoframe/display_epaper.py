#!/usr/bin/env python3
"""
E-Paper Display Program for AI Photo Frame
FastSD CPUで生成した画像をe-paperディスプレイに表示

Based on: legacy-reference/app.py
Usage: 
  # 仮想環境をアクティベートしてから実行
  source ~/fastsdcpu-project/fastsd-simple-env/bin/activate
  python3 display_epaper.py [image_path]
"""

from PIL import Image, ImageDraw, ImageFont, ImageOps
from inky.inky_uc8159 import Inky
import datetime
import os
import sys
import argparse

# デフォルト設定
DEFAULT_IMAGE_PATH = "/home/pi/fastsdcpu-project/fastsdcpu-stable/test_output.png"
FONT_PATH = "/home/pi/font/MPLUSRounded1c-Bold.ttf"
FONT_SIZE = 18

# E-paper ディスプレイ設定（Inky Impression 7色 640x400）
DISPLAY_WIDTH = 640
DISPLAY_HEIGHT = 400

def setup_display():
    """E-paperディスプレイの初期化"""
    try:
        # GPIO競合回避: SPIデバイスを一旦リセット
        import subprocess
        import time
        
        print("🔧 GPIO競合回避のためSPIを再初期化中...")
        
        # SPIデバイスのリセット試行
        try:
            subprocess.run(['sudo', 'modprobe', '-r', 'spidev'], capture_output=True)
            time.sleep(0.5)
            subprocess.run(['sudo', 'modprobe', 'spidev'], capture_output=True)
            time.sleep(0.5)
        except:
            pass  # 失敗してもInky初期化を試行
        
        inky_display = Inky(
            resolution=(DISPLAY_WIDTH, DISPLAY_HEIGHT),
            cs_pin=8,    # 従来通りGPIO8を使用
            dc_pin=25,
            reset_pin=17,
            busy_pin=24
        )
        inky_display.set_border(inky_display.BLACK)
        print("✅ E-paperディスプレイの初期化完了")
        return inky_display
    except Exception as e:
        print(f"❌ E-paperディスプレイの初期化に失敗: {e}")
        print(f"   詳細: GPIO8 (CS0) が他のプロセスで使用中の可能性があります")
        print(f"   解決方法を試行中...")
        return None

def load_and_resize_image(image_path):
    """画像を読み込み、e-paperディスプレイサイズにリサイズ"""
    try:
        if not os.path.exists(image_path):
            print(f"❌ 画像ファイルが見つかりません: {image_path}")
            return None
        
        # 画像を読み込み
        img = Image.open(image_path)
        print(f"📷 画像を読み込みました: {image_path}")
        print(f"   元のサイズ: {img.size}")
        
        # E-paperディスプレイサイズにリサイズ（アスペクト比を保持）
        img.thumbnail((DISPLAY_WIDTH, DISPLAY_HEIGHT), Image.Resampling.LANCZOS)
        
        # 640x400のキャンバスを作成（白背景）
        canvas = Image.new('RGB', (DISPLAY_WIDTH, DISPLAY_HEIGHT), 'white')
        
        # 画像を中央に配置
        x = (DISPLAY_WIDTH - img.width) // 2
        y = (DISPLAY_HEIGHT - img.height) // 2
        canvas.paste(img, (x, y))
        
        print(f"   リサイズ後: {canvas.size}")
        return canvas
    
    except Exception as e:
        print(f"❌ 画像の読み込みに失敗: {e}")
        return None

def add_timestamp_text(img, text_info=""):
    """画像に日時とテキスト情報を追加"""
    try:
        draw = ImageDraw.Draw(img)
        
        # フォントの設定（フォントファイルが無い場合はデフォルトフォント使用）
        try:
            if os.path.exists(FONT_PATH):
                font = ImageFont.truetype(FONT_PATH, FONT_SIZE, encoding='unic')
            else:
                font = ImageFont.load_default()
                print(f"⚠️  フォントファイルが見つかりません。デフォルトフォントを使用: {FONT_PATH}")
        except:
            font = ImageFont.load_default()
            print("⚠️  フォント読み込みエラー。デフォルトフォントを使用")
        
        # 現在時刻を取得
        dt_now = datetime.datetime.now()
        disp_date = dt_now.strftime('%a, %d %b %Y %H:%M:%S')
        
        # 表示テキストを作成
        if text_info:
            display_text = f'Displayed at {disp_date}\n{text_info}'
        else:
            display_text = f'Displayed at {disp_date}\nGenerated by FastSD CPU'
        
        # テキストを画像下部に描画（背景: 黒、文字: 白）
        draw.text(
            (8, DISPLAY_HEIGHT - 8), 
            display_text,
            fill='white',
            stroke_width=2,
            stroke_fill='black',
            font=font,
            anchor='ld'
        )
        
        print("✅ タイムスタンプテキストを追加しました")
        return img
    
    except Exception as e:
        print(f"❌ テキスト追加に失敗: {e}")
        return img

def display_on_epaper(inky_display, img):
    """e-paperディスプレイに画像を表示"""
    try:
        print("🖼️  E-paperディスプレイに画像を転送中...")
        inky_display.set_image(img)
        inky_display.show()
        print("✅ E-paperディスプレイへの表示完了！")
        return True
    
    except Exception as e:
        print(f"❌ E-paperディスプレイ表示に失敗: {e}")
        return False

def main():
    """メイン処理"""
    parser = argparse.ArgumentParser(description="FastSD CPU生成画像をE-paperに表示")
    parser.add_argument(
        'image_path',
        nargs='?',
        default=DEFAULT_IMAGE_PATH,
        help=f'表示する画像ファイルのパス (デフォルト: {DEFAULT_IMAGE_PATH})'
    )
    parser.add_argument(
        '--text',
        '-t',
        default="",
        help='画像に追加するテキスト情報'
    )
    parser.add_argument(
        '--no-timestamp',
        action='store_true',
        help='タイムスタンプを追加しない'
    )
    parser.add_argument(
        '--preview',
        action='store_true',
        help='E-paperに表示せず、プレビュー画像を保存'
    )
    
    args = parser.parse_args()
    
    print("🖼️  AI Photo Frame - E-Paper Display")
    print(f"📁 画像パス: {args.image_path}")
    
    # 1. 画像の読み込みとリサイズ
    img = load_and_resize_image(args.image_path)
    if img is None:
        sys.exit(1)
    
    # 2. タイムスタンプテキストの追加
    if not args.no_timestamp:
        img = add_timestamp_text(img, args.text)
    
    # 3. プレビューモードの場合は画像保存のみ
    if args.preview:
        preview_path = "/home/pi/epaper_preview.png"
        img.save(preview_path)
        print(f"💾 プレビュー画像を保存: {preview_path}")
        return
    
    # 4. E-paperディスプレイの初期化
    inky_display = setup_display()
    if inky_display is None:
        print("❌ E-paperディスプレイが利用できません。--previewオプションでプレビューを確認してください。")
        sys.exit(1)
    
    # 5. E-paperディスプレイへの表示
    success = display_on_epaper(inky_display, img)
    
    if success:
        print("🎉 AI Photo Frame表示完了！")
    else:
        sys.exit(1)

if __name__ == "__main__":
    main()